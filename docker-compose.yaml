services:
  kafka:
    image: bitnami/kafka:3.5.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_CLUSTER_ID: ZxcCUGdCTxqS4PG3WiaYdQ
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_LISTENERS: "BROKER://kafka:9092,CONTROLLER://kafka:29093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "BROKER://kafka:9092"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_LOG_DIRS: /bitnami/kafka/data
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,BROKER:PLAINTEXT"
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      - sentiment-network

  producer:
    build: ./producer
    container_name: producer
    depends_on: 
      - kafka 
    networks:
      - sentiment-network
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      TOPIC_NAME: ${KAFKA_TOPIC}

  consumer:
    build: ./consumer 
    container_name: consumer
    depends_on: 
      - kafka
    networks:
      - sentiment-network
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      TOPIC_NAME: ${KAFKA_TOPIC}
  
  pyspark-worker:
    build: ./pyspark-worker
    container_name: pyspark-worker
    user: root
    networks: 
      - sentiment-network
    depends_on:
      - producer
      - consumer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      SPARK_KAFKA_MAX_RETRIES: 30
      SPARK_KAFKA_RETRY_DELAY: 2

networks:
  sentiment-network:
    driver: bridge

volumes:
  kafka-data:
    driver: local

